#!/bin/bash
set -euxo pipefail

load_kmods() {
    # Load kernel modules only when required. In BZ# 1803130,
    # it was discovered that virtual hardware that lacks an entrophy
    # source fails to boot. Ensure that we only load the required modules
    # if needed.
    modprobe -a dm_crypt loop
}

FS_LABEL=crypt_rootfs
LUKS_HEADER_OFFSET_SECTORS=32768

# we do realpath here since we temporarily lose the label when reencrypting
dev=$(realpath /dev/disk/by-label/${FS_LABEL})

clevis_id="$(cryptsetup luksDump ${dev} | sed -rn 's|^\s+([0-9]+): clevis|\1|p')"
cipher=$(cryptsetup luksDump ${dev} | awk '/cipher/{print$NF;exit}')

# Mount /boot. Note that we mount /boot but we don't unmount it because we
# are run in a systemd unit with MountFlags=slave so it is unmounted for us.
bootmnt=/mnt/boot_partition
mkdir -p ${bootmnt}
bootdev=/dev/disk/by-label/boot
mount -o rw ${bootdev} ${bootmnt}

if [ "${cipher}" == "cipher_null-ecb" ]; then
    major=$((0x$(stat -c '%t' "${dev}")))
    minor=$((0x$(stat -c '%T' "${dev}")))
    devpath=$(realpath "/sys/dev/block/${major}:${minor}")
    partnum=$(cat "$devpath/partition")
    parent_path=$(dirname "$devpath")
    parent=$(basename "${parent_path}")
    partition="${parent}${partnum}"
    parent_device=/dev/"${parent}"
    arch=$(uname -m)

    if [ "$partnum" != "4" ]; then
        echo "unexpected partition number: $partnum"
        exit 1
    fi
    # hard-code the label to root
    label="root"
    guid=$(lsblk --noheadings --output PARTUUID /dev/$partition)
    # lsblk will output the LUKS UUID followed by the filesystem UUID
    filesystem_uuid=$(lsblk --noheadings --output UUID /dev/$partition | tail -n1)
    # move the start sector 32768 to move past the LUKS header
    startsector="$(($(cat /sys/block/$parent/$partition/start)+32768))"
    size=$(($(blockdev --getsize ${dev}) - ${LUKS_HEADER_OFFSET_SECTORS}))

    # check / handle 4k sector size devices
    sector_size=$(cat /sys/block/$parent/queue/logical_block_size)
    if [ "$sector_size" == "4096" ]; then
        startsector=$((startsector / 8))
        size=$((size / 8))
    fi

    # validate that the new partition will start at the xfs super block
    skipcount=$(($startsector * $sector_size))
    if [ $(dd if=/dev/$parent bs=1 count=4 status=none skip=$skipcount) != XFSB ]; then
        echo "couldn't detect XFS superblock at expected partition start"
        exit 1
    fi

    if [ "$(arch)" == "s390x" ]; then
        # s390x DASD devices don't use GPT, dd the partition over the LUKS header
        # which is 16MiB
        dd if=$partition of=$partition bs=1M skip=16
    else
        # recreate the partition offset after the LUKS header
        # we don't want to copy the typeguid because that's pointing to crypt_luks
        sgdisk -d $partnum -n $partnum:$startsector:+$size -c $partnum:$label /dev/$parent -u $partnum:$guid
    fi
    # delete the rhcos.root karg to prevent unlocking attempts
    /bin/rdcore kargs --boot-mount ${bootmnt} --delete rhcos.root --append root=UUID=$filesystem_uuid --append rw
# pre-4.7 root LUKS devices are always named luks-00000000-0000-4000-a000-000000000002
elif [ -n "${clevis_id}" ]; then
    # unlock the device
    load_kmods
    pin=$(cryptsetup token export --token-id "${cleivs_id}" "${dev}" \
        | jq -rM '.jwe.protected' | base64 -d | jq -rM '.clevis.pin')
    msg "${dev} is configured for Clevis pin '${pin}'"
    [ "${pin}" == "tpm2" ] || net_waiter
    clevis-luks-unlock -d "${dev}"
    # check if the rhcos.root karg exists; if it does not then this script has already
    # modified the kargs and can exit early
    if ! grep -q rhcos.root <(/bin/rdcore kargs --boot-mount ${bootmnt}); then
        > /run/rhcos-rootfs-upgraded
        exit
    fi
    dm_device=$(readlink /dev/mapper/luks-00000000-0000-4000-a000-000000000002 -f)
    dm_device_name=$(basename $dm_device)
    partition=$(ls /sys/block/$dm_device_name/slaves/)
    luksuuid=$(cryptsetup luksUUID /dev/$partition)
    fsuuid=$(blkid -s UUID -o value /dev/mapper/luks-00000000-0000-4000-a000-000000000002)

    set -- --delete rhcos.root --delete rd.luks.options --append root=UUID=$fsuuid --append rw --append rd.luks.name=$luksuuid=luks-$luksuuid
    if [[ "$pin" != "tpm2" ]]; then
        set -- "$@" --append rd.luks.options=_netdev
        # avoid duplicating rd.neednet=1
        if ! grep -q rd.neednet <(/bin/rdcore kargs --boot-mount ${bootmnt}); then
            set -- "$@" --append rd.neednet=1
        fi
    fi
    /bin/rdcore kargs --boot-mount ${bootmnt} "$@"
fi
